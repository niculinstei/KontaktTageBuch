/*
 * This file is generated by jOOQ.
 */
package ch.niculin.contactdairy.jooq.tables;


import ch.niculin.contactdairy.jooq.DefaultSchema;
import ch.niculin.contactdairy.jooq.tables.records.KontaktRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kontakt extends TableImpl<KontaktRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Kontakt</code>
     */
    public static final Kontakt KONTAKT = new Kontakt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KontaktRecord> getRecordType() {
        return KontaktRecord.class;
    }

    /**
     * The column <code>Kontakt.datumID</code>.
     */
    public final TableField<KontaktRecord, Integer> DATUMID = createField(DSL.name("datumID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Kontakt.personID</code>.
     */
    public final TableField<KontaktRecord, Integer> PERSONID = createField(DSL.name("personID"), SQLDataType.INTEGER, this, "");

    private Kontakt(Name alias, Table<KontaktRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kontakt(Name alias, Table<KontaktRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Kontakt</code> table reference
     */
    public Kontakt(String alias) {
        this(DSL.name(alias), KONTAKT);
    }

    /**
     * Create an aliased <code>Kontakt</code> table reference
     */
    public Kontakt(Name alias) {
        this(alias, KONTAKT);
    }

    /**
     * Create a <code>Kontakt</code> table reference
     */
    public Kontakt() {
        this(DSL.name("Kontakt"), null);
    }

    public <O extends Record> Kontakt(Table<O> child, ForeignKey<O, KontaktRecord> key) {
        super(child, key, KONTAKT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Kontakt as(String alias) {
        return new Kontakt(DSL.name(alias), this);
    }

    @Override
    public Kontakt as(Name alias) {
        return new Kontakt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kontakt rename(String name) {
        return new Kontakt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kontakt rename(Name name) {
        return new Kontakt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
